{"name":"Json-RPC client/server library for PHP","tagline":"Simple Json-RPC PHP client/server that just works.","body":"JsonRPC PHP Client and Server\r\n=============================\r\n\r\nA simple Json-RPC client/server that just works.\r\n\r\nFeatures\r\n--------\r\n\r\n- JSON-RPC 2.0 protocol only\r\n- The server support batch requests and notifications\r\n- Authentication and IP based client restrictions\r\n- Minimalist: there is only 2 files\r\n- License: Unlicense http://unlicense.org/\r\n\r\nRequirements\r\n------------\r\n\r\n- The only dependency is the cURL extension\r\n- PHP >= 5.3\r\n\r\nAuthor\r\n------\r\n\r\n[Frédéric Guillot](http://fredericguillot.com)\r\n\r\nExamples\r\n--------\r\n\r\n### Server\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Server.php';\r\n\r\nuse JsonRPC\\Server;\r\n\r\n$server = new Server;\r\n\r\n// Procedures registration\r\n\r\n$server->register('addition', function ($a, $b) {\r\n\r\n    return $a + $b;\r\n});\r\n\r\n$server->register('random', function ($start, $end) {\r\n\r\n    return mt_rand($start, $end);\r\n});\r\n\r\n// Return the response to the client\r\necho $server->execute();\r\n```\r\n\r\n### Client\r\n\r\nExample with positional parameters:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Client.php';\r\n\r\nuse JsonRPC\\Client;\r\n\r\n$client = new Client('http://localhost/server.php');\r\n$result = $client->execute('addition', [3, 5]);\r\n\r\nvar_dump($result);\r\n```\r\n\r\nExample with named arguments:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Client.php';\r\n\r\nuse JsonRPC\\Client;\r\n\r\n$client = new Client('http://localhost/server.php');\r\n$result = $client->execute('random', ['end' => 10, 'start' => 1]);\r\n\r\nvar_dump($result);\r\n```\r\n\r\nArguments are called in the right order.\r\nIf there is a Json-RPC protocol error, the `execute()` method throw an exception `BadFunctionCallException`.\r\n\r\nExample with shortcut methods:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Client.php';\r\n\r\nuse JsonRPC\\Client;\r\n\r\n$client = new Client('http://localhost/server.php');\r\n$result = $client->random(50, 100);\r\n\r\nvar_dump($result);\r\n```\r\n\r\n### Enable client debugging\r\n\r\nYou can enable the debug to see the JSON request and response:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Client.php';\r\n\r\nuse JsonRPC\\Client;\r\n\r\n$client = new Client('http://localhost/server.php');\r\n$client->debug = true;\r\n```\r\n\r\nThe debug output is sent to the PHP's system logger.\r\nYou can configure the log destination in your `php.ini`.\r\n\r\nOutput example:\r\n\r\n```json\r\n==> Request:\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"method\": \"removeCategory\",\r\n    \"id\": 486782327,\r\n    \"params\": [\r\n        1\r\n    ]\r\n}\r\n==> Response:\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": 486782327,\r\n    \"result\": true\r\n}\r\n```\r\n\r\n### IP based client restrictions\r\n\r\nThe server can allow only some IP adresses:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Server.php';\r\n\r\nuse JsonRPC\\Server;\r\n\r\n$server = new Server;\r\n\r\n// IP client restrictions\r\n$server->allowHosts(['192.168.0.1', '127.0.0.1']);\r\n\r\n// Procedures registration\r\n\r\n[...]\r\n\r\n// Return the response to the client\r\necho $server->execute();\r\n```\r\n\r\nIf the client is blocked, you got a 403 Forbidden HTTP response.\r\n\r\n### HTTP Basic Authentication\r\n\r\nIf you use HTTPS, you can allow client by using a username/password.\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Server.php';\r\n\r\nuse JsonRPC\\Server;\r\n\r\n$server = new Server;\r\n\r\n// List of users to allow\r\n$server->authentication(['jsonrpc' => 'toto']);\r\n\r\n// Procedures registration\r\n\r\n[...]\r\n\r\n// Return the response to the client\r\necho $server->execute();\r\n```\r\n\r\nOn the client, set credentials like that:\r\n\r\n```php\r\n<?php\r\n\r\nrequire 'JsonRPC/Client.php';\r\n\r\nuse JsonRPC\\Client;\r\n\r\n$client = new Client('http://localhost/server.php');\r\n\r\n// Credentials\r\n$client->authentication('jsonrpc', 'toto');\r\n$result = $client->execute('addition', ['a' => 2, 'b' => 2]);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}